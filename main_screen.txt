import 'package:bxtra_rider/app/constants/app_colors.dart';
import 'package:bxtra_rider/core/user/data/models/rider_profile/rider_profile.dart';
import 'package:bxtra_rider/core/user/presentation/screens/login/login_screen.dart';
import 'package:bxtra_rider/features/home/cubit/profile_cubit.dart';
import 'package:bxtra_rider/features/home/presentation/screens/messages_screen.dart';
import 'package:bxtra_rider/features/main/pages/help_center_screen_screen.dart';
import 'package:bxtra_rider/features/main/pages/history_screen.dart';
import 'package:bxtra_rider/features/main/pages/offline_screen.dart';
import 'package:bxtra_rider/features/main/pages/online_screen.dart';
import 'package:bxtra_rider/features/income/presentation/screens/income_screen.dart';
import 'package:bxtra_rider/features/main/queing_modal_body.dart';
import 'package:bxtra_rider/widgets/custom_widgets.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:modal_bottom_sheet/modal_bottom_sheet.dart';
import 'package:persistent_bottom_nav_bar_v2/persistent-tab-view.dart';

import '../../main.dart';

class MainScreen extends StatefulWidget {
  const MainScreen({Key? key}) : super(key: key);
  static const String routeName = '/main';
  static const String screenName = 'mainScreen';
  static ModalRoute<void> route() =>
      MaterialPageRoute<void>(builder: (context) => MainScreen(), settings: RouteSettings(name: routeName));
  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  late PersistentTabController _controller;

  late ProfileCubit profileCubit;
  RiderProfileResponse riderProfileResponse = RiderProfileResponse();
  bool isOnline = false;

  @override
  void initState() {
    _controller = PersistentTabController(initialIndex: 1);
    profileCubit = BlocProvider.of<ProfileCubit>(context);
    profileCubit.getProfile();
    super.initState();
  }

  void showQueingModal(BuildContext context) {
    showMaterialModalBottomSheet(
      context: context,
      useRootNavigator: true,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10.0),
      ),
      builder: (BuildContext context) => QueingModalBody(),
    );
  }

  void showNotHiredDialog(BuildContext context) {
    final Size screenSize = MediaQuery.of(context).size;

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
          content: Container(
            height: screenSize.height * .2,
            width: screenSize.width * .8,
            padding: EdgeInsets.all(16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Your account is still for approval. Please wait patiently as we review the details and requirements you have submitted.',
                  textAlign: TextAlign.center,
                  style: Theme.of(context).textTheme.subtitle1!.copyWith(
                        fontSize: screenSize.height * .018,
                      ),
                ),
                ClipRRect(
                  borderRadius: BorderRadius.circular(120),
                  child: InkWell(
                    onTap: () {
                      Navigator.pop(context);
                    },
                    child: Container(
                        height: screenSize.height * .06,
                        width: screenSize.width * .5,
                        color: Color(0xff2ECC71).withOpacity(.24),
                        alignment: Alignment.center,
                        child: Text('I UNDERSTAND',
                            style: Theme.of(context).textTheme.subtitle2!.copyWith(
                                color: Color(0xff2ECC71),
                                fontWeight: FontWeight.bold,
                                fontSize: screenSize.height * .018))),
                  ),
                )
              ],
            ),
          ),
        );
      },
    );
  }

  Future<void> navigate() async {
    await Navigator.of(context, rootNavigator: true).push(HistoryScreen.route());
  }

  @override
  Widget build(BuildContext context) {
    final Size screenSize = MediaQuery.of(context).size;

    List<PersistentBottomNavBarItem> _navBarsItems({required bool isOnline}) {
      return [
        PersistentBottomNavBarItem(
          icon: Icon(Icons.support_agent),
          title: ('Help Center'),
          textStyle: Theme.of(context).textTheme.subtitle2,
          activeColorPrimary: AppColors.appBlue,
          inactiveColorPrimary: AppColors.appTextGrey,
        ),
        PersistentBottomNavBarItem(
          icon: SizedBox(
            height: 75,
            width: 75,
            child: Stack(
              alignment: Alignment.center,
              children: [
                Icon(
                  Icons.grid_view,
                  color: isOnline ? Colors.white : Colors.white54,
                  size: 28,
                ),
                Container(
                  padding: EdgeInsets.zero,
                  alignment: Alignment.center,
                  child: FittedBox(
                    fit: BoxFit.contain,
                    child: Icon(
                      Icons.circle_outlined,
                      color: AppColors.stepColorDoneBorder.withOpacity(.2),
                      size: 75,
                    ),
                  ),
                ),
              ],
            ),
          ),
          inactiveIcon: SizedBox(
            height: 75,
            width: 75,
            child: Stack(
              alignment: Alignment.center,
              children: [
                Icon(
                  Icons.grid_view,
                  color: isOnline ? Colors.white : Colors.white54,
                  size: 25,
                ),
                Container(
                  padding: EdgeInsets.zero,
                  alignment: Alignment.center,
                  child: FittedBox(
                    fit: BoxFit.contain,
                    child: Icon(
                      Icons.circle_outlined,
                      color: AppColors.stepColorDoneBorder.withOpacity(.2),
                      size: 55,
                    ),
                  ),
                ),
              ],
            ),
          ),
          title: (isOnline ? 'Online' : 'Offline'),
          onPressed: (context) {
            _controller.jumpToTab(1);

            if (!isOnline) {
              showNotHiredDialog(context!);
            } else {
              showQueingModal(context!);
            }
          },
          textStyle: Theme.of(context).textTheme.subtitle2,
          activeColorPrimary: isOnline ? AppColors.appBlue : Color(0xffE74C3C),
          inactiveColorPrimary: AppColors.appTextGrey,
        ),
        PersistentBottomNavBarItem(
            icon: Icon(FontAwesomeIcons.listCheck),
            title: ('History'),
            textStyle: Theme.of(context).textTheme.subtitle2,
            activeColorPrimary: AppColors.appBlue,
            inactiveColorPrimary: AppColors.appTextGrey,
            onPressed: (val) {
              navigate();
            }),
      ];
    }

    return Scaffold(
        resizeToAvoidBottomInset: true,
        body: Stack(
          fit: StackFit.passthrough,
          children: [
            Container(
              margin: EdgeInsets.only(top: screenSize.height * .13),
              child: BlocConsumer<ProfileCubit, ProfileState>(
                listener: (context, state) {
                  // TODO: implement listener
                },
                builder: (context, state) {
                  if (state is ProfileSuccess) {
                    riderProfileResponse = state.riderProfileResponse;
                    isOnline = riderProfileResponse.isActive ?? false;
                    print('TEST isOnline $isOnline');
                  } else if (state is ProfileFailed) {
                    isOnline = false;
                  }
                  return PersistentTabView(
                    context,
                    controller: _controller,
                    screens: [
                      HelpCenterScreenScreen(),
                      state is ProfileLoading
                          ? Center(
                              child: CircularProgressIndicator(),
                            )
                          : isOnline
                              ? OnlineScreen(riderProfileResponse: riderProfileResponse)
                              : OfflineScreen(riderProfileResponse: riderProfileResponse),
                      HistoryScreen(),
                    ],
                    // items: _navBarsItems(isOnline: isOnline),
                    items: _navBarsItems(isOnline: isOnline),

                    confineInSafeArea: false,
                    backgroundColor: Colors.white, // Default is Colors.white.
                    handleAndroidBackButtonPress: true, // Default is true.
                    resizeToAvoidBottomInset:
                        true, // This needs to be true if you want to move up the screen when keyboard appears. Default is true.
                    stateManagement: true, // Default is true.
                    hideNavigationBarWhenKeyboardShows:
                        true, // Recommended to set 'resizeToAvoidBottomInset' as true while using this argument. Default is true.
                    decoration: NavBarDecoration(
                      colorBehindNavBar: AppColors.appBlack,
                      boxShadow: <BoxShadow>[
                        BoxShadow(
                          color: Colors.grey.withOpacity(0.6),
                          spreadRadius: 2,
                          blurRadius: 3,
                          offset: Offset(1, 1), // changes position of shadow
                        ),
                      ],
                    ),

                    onWillPop: (context) async {
                      return false;
                    },
                    popAllScreensOnTapOfSelectedTab: true,
                    popActionScreens: PopActionScreensType.all,
                    itemAnimationProperties: ItemAnimationProperties(
                      // Navigation Bar's items animation properties.
                      duration: Duration(milliseconds: 200),
                      curve: Curves.ease,
                    ),
                    screenTransitionAnimation: ScreenTransitionAnimation(
                      // Screen transition animation on change of selected tab.
                      animateTabTransition: true,
                      curve: Curves.ease,
                      duration: Duration(milliseconds: 200),
                    ),
                    navBarHeight: 75,
                    navBarStyle: NavBarStyle.style15, // Choose the nav bar style with this property.
                  );
                },
              ),
            ),
            HomeAppBar(
              height: screenSize.height * .13,
              width: double.infinity,
              countBell: 1,
              onTapBell: () {},
              onTapMail: () {
                Navigator.of(context, rootNavigator: true).push(
                  MessagesScreen.route(riderId: riderProfileResponse.id.toString()),
                );
              },
              onTapAccount: (selected) {
                if (selected == 1) {
                  Navigator.of(context).pushReplacement(LoginScreen.route());
                } else {
                  alice.showInspector();
                }
              },
              countMail: 10,
            ),
          ],
        ));
  }
}
